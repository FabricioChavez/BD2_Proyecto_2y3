import os
from tqdm import tqdm
import numpy as np
from Experiments.Experiments_local import process_image_opencv
from Searching.KnnSeq import prepare_knn_model, find_knn_cosine_by_radio
import time
import csv

def run_knn_seq_ran_experiment():
    directory_path = os.path.join("D:/", "PROYECTO BD2", "BD2_Proyecto_2y3", "DB2_Proyect", "portraits") 
    index_path = os.path.join("D:/", "PROYECTO BD2", "BD2_Proyecto_2y3", "Proyecto3", "data", "data", "index_dict_color_cv.npz")
    vector_path = os.path.join("D:/", "PROYECTO BD2", "BD2_Proyecto_2y3", "Proyecto3", "data", "data", "feature_vector_color_cv.npy")

    # Validar existencia de archivos
    if not os.path.exists(index_path) or not os.path.exists(vector_path):
        print("Error: Archivos de índice o vector de características no encontrados.")
        return

    try:
        data_dict = np.load(index_path, allow_pickle=True)
        print("Claves en archivo de índice:", data_dict.files)
        index_dict = data_dict['arr_0'].item()
        feature_vector = np.load(vector_path)
    except Exception as e:
        print(f"Error al cargar los datos: {e}")
        return

    size = len(feature_vector)
    sizes = np.linspace(1000, size, num=10, dtype=int)

    query_path = os.path.join(directory_path, "3504480.jpg")
    if not os.path.exists(query_path):
        print(f"Error: La imagen de consulta {query_path} no existe.")
        return

    _, query = process_image_opencv(query_path)
    query_experiment_index = index_dict.get("3504480")
    if query_experiment_index is None:
        print("Error: La imagen de consulta no está en el índice.")
        return

    times = np.zeros(len(sizes))

    for idx, sample_size in tqdm(enumerate(sizes), total=len(sizes)):
        if sample_size < query_experiment_index:
            features = np.concatenate([
                feature_vector[:sample_size],
                feature_vector[query_experiment_index:query_experiment_index + 1]
            ], axis=0)
            if features.ndim != 2:
                print("Error: Dimensiones inconsistentes en características.")
                return
        else:
            features = feature_vector[:sample_size]

        normalized_features = prepare_knn_model(features)

        start_time = time.time()
        results = list(find_knn_cosine_by_radio(normalized_features, index_dict, query, directory_path, radius=[0.5]))
        if not results:
            print(f"No se encontraron vecinos para tamaño de muestra {sample_size}")
        times[idx] = time.time() - start_time

    def save_timing_data(sizes, times, output_path):
        os.makedirs(output_path, exist_ok=True)
        output_file = os.path.join(output_path, 'times_knn_seq_ran.csv')
        with open(output_file, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['sizes_knn_seq_ran', 'times_knn_seq_ran'])
            for size, time_value in zip(sizes, times):
                writer.writerow([size, time_value])

    output_path = os.path.join(os.getcwd(), "src", "Experiments", "times")
    save_timing_data(sizes, times, output_path)
    print("Guardado en ...", output_path)
if __name__ == "__main__":
    run_knn_seq_ran_experiment()